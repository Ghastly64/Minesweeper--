[{"/Users/marksorial/vs_code/Minesweeper ++/minesweeper/src/index.js":"1","/Users/marksorial/vs_code/Minesweeper ++/minesweeper/src/reportWebVitals.js":"2","/Users/marksorial/vs_code/Minesweeper ++/minesweeper/src/App.js":"3"},{"size":500,"mtime":1612352730999,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1612352731001,"results":"6","hashOfConfig":"5"},{"size":12102,"mtime":1618210618781,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1i6blcl",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/Users/marksorial/vs_code/Minesweeper ++/minesweeper/src/index.js",[],["16","17"],"/Users/marksorial/vs_code/Minesweeper ++/minesweeper/src/reportWebVitals.js",[],"/Users/marksorial/vs_code/Minesweeper ++/minesweeper/src/App.js",["18"],"import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport logo from './Images/bomb.svg';\nimport Modal from 'react-bootstrap/Modal'\nimport fired from './Images/fired.svg';\nimport target from './Images/target.svg';\nimport './App.css';\n\nfunction CompFired() { //component to house image\n  return <img className='cell-img' src={fired} alt=\"\" />\n}\n\nfunction CompTarget() { //component to house image\n  return <img className='cell-img' src={target} alt=\"\" />\n}\n\nfunction randomInt(min, max) { // random integer for bomb, min and max included \n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n\nlet bombList = []; //list of bombs\nfor (let i = 1; i <= 10; i++) { //get random tiles to become bombs\n  var randCol = randomInt(1, 8);\n  var randRow = randomInt(1, 9);\n  if (bombList.includes([randRow, randCol])) {\n\n  } else {\n    bombList.push([randRow, randCol]);\n  }\n} \n\nlet zeroList = []; //list of tiles that have no bombs near it\nlet targetCounterVar = 10; //var to count how many flags left\nlet isEnd = false; //if true will trigger EndModal\nlet endCheck = true; //stops EndModal from infinitley refreshing itself\nlet updateInt; //updates in modal to cause rerender\n\nclass Cell extends React.Component { //main cell code\n  constructor(props) {\n    super(props);\n    this.state = {\n      val: 'closed', //has the tile been opened or not\n      isBomb: false, \n      isFlagged: false, \n      col: 0, \n      row: 0,\n      bombCounter: 0}\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.bombSetup();\n    this.interval = setInterval(() => this.revealTiles(), 100); //set timer to check for opened zero tiles\n  }\n\n  updateState = () => {\n    this.setState({\n        val: this.state.val,\n        isBomb: this.state.isBomb,\n        isFlagged: this.state.isFlagged, \n        id: this.state.id,\n        bombCounter: this.state.bombCounter\n      })\n  };\n\n  componentWillUnmount() { //stop timer and right click menu\n    document.removeEventListener(\"contextmenu\", this.handleRightClick);\n    clearInterval(this.interval);\n  }\n\n  handleClick() { //function to handle clicks\n    if (this.state.isFlagged){ //if player opens a tile with a target removes target and adds to total targets\n      targetCounterVar++;\n    }\n    if (this.state.isBomb) {\n      isEnd = true;\n    }\n    this.setState(state => ({val: 'open'})); //opens tile\n    this.addZero();//if tile is a 0 add to zerolist\n  }\n\n  \n\n  handleRightClick = (e) => { //right click handler\n    e.preventDefault();\n    if (this.state.val === 'closed') { //check if tile is still closed\n      if (this.state.isFlagged){ //unflag a tile\n        this.setState(state => ({isFlagged: false}));\n        targetCounterVar++;\n      }else{ //flag a tile\n        this.setState(state => ({isFlagged: true}));\n        targetCounterVar--;\n      }\n    }\n  }\n\n  addZero() { //add to zerolist if no bombs next to it\n    if (this.state.bombCounter === 0) {\n      zeroList.push([this.props.row, this.props.col]);\n    }\n  } \n\n  revealTiles() { //handle reavling neighbor zeros\n    if (this.state.val === 'closed') {\n      for (const x of zeroList) {\n        if (x[0] === this.props.row && (x[1] - 1) === this.props.col) { //checks if a zero is directly above\n          this.setState(state => ({val: 'open'}));\n          this.addZero();\n        };\n        if (x[0] === this.props.row && (x[1] + 1) === this.props.col) {//checks if a zero is directly below\n          this.setState(state => ({val: 'open'}));\n          this.addZero();\n        };\n        if ((x[0]-1) === this.props.row && x[1] === this.props.col) { //checks if a zero is directly left\n          this.setState(state => ({val: 'open'}));\n          this.addZero();\n        };\n        if ((x[0]+1) === this.props.row && x[1] === this.props.col) { //checks if a zero is directly right\n          this.setState(state => ({val: 'open'}));\n          this.addZero();\n        };\n        if ((x[0]-1) === this.props.row && (x[1]-1) === this.props.col) { //checks if a zero is to the top left\n          this.setState(state => ({val: 'open'}));\n          this.addZero();\n        };\n        if ((x[0]-1) === this.props.row && (x[1]+1) === this.props.col) { //checks if a zero is to the bottom left\n          this.setState(state => ({val: 'open'}));\n          this.addZero();\n        };\n        if ((x[0]+1) === this.props.row && (x[1]-1) === this.props.col) { //checks if a zero is to the top right\n          this.setState(state => ({val: 'open'}));\n          this.addZero();\n        };\n        if ((x[0]+1) === this.props.row && (x[1]+1) === this.props.col) {//checks if a zero is to the bottom right\n          this.setState(state => ({val: 'open'}));\n          this.addZero();\n        };\n      };\n    }\n  }\n\n  updateId() { //adds passed props to state\n    this.setState(state => ({row: this.props.row}));\n    this.setState(state => ({col: this.props.col}));\n  }\n\n  bombAdd() { //if called adds to bombCounter which displays amount of bombs adjacent\n    this.setState(prevState => ({bombCounter: prevState.bombCounter + 1}));\n  }\n\n  bombSetup() { //checks current tile if its a bomb\n    for (const x of bombList) {\n      if (x[0] === this.props.row && x[1] === this.props.col) {\n        this.setState(state => ({bombCounter: 99}));\n        this.setState(state => ({isBomb: true}));\n        return;\n      };\n    };\n    \n    for (const x of bombList) {\n      if (x[0] === this.props.row && (x[1] - 1) === this.props.col) { //checks for bomb in top tile\n        this.bombAdd();\n      };\n      if (x[0] === this.props.row && (x[1] + 1) === this.props.col) { //checks for bomb in bottom tile\n        this.bombAdd();\n      };\n      if ((x[0]-1) === this.props.row && x[1] === this.props.col) { //checks for bomb in left tile\n        this.bombAdd();\n      };\n      if ((x[0]+1) === this.props.row && x[1] === this.props.col) { //checks for bomb in right tile\n        this.bombAdd();\n      };\n      if ((x[0]-1) === this.props.row && (x[1]-1) === this.props.col) { //checks for bomb in top left tile\n        this.bombAdd();\n      };\n      if ((x[0]-1) === this.props.row && (x[1]+1) === this.props.col) { //checks for bomb in bottom left tile\n        this.bombAdd();\n      };\n      if ((x[0]+1) === this.props.row && (x[1]-1) === this.props.col) { //checks for bomb in top right tile\n        this.bombAdd();\n      };\n      if ((x[0]+1) === this.props.row && (x[1]+1) === this.props.col) {//checks for bomb in bottom right tile\n        this.bombAdd();\n      };\n    };\n  }\n\n  render() { \n    let img;\n    let clsName;\n    if (this.state.val === 'closed') { //displays tile if revealed, closed, flagged, or bomb\n      if (this.state.isFlagged) {\n        img = <CompTarget />\n        clsName = 'cell-closed';\n      } else {\n        clsName = 'cell-closed';\n      }\n    } else if (this.state.val === 'open') {\n      if (this.state.isBomb) {\n        img = <CompFired />\n        clsName = 'cell-bomb';\n      } else {\n        img = <p>{this.state.bombCounter}</p>;\n        clsName = 'cell-open';\n      }\n    }\n  \n    \n    return (\n      <div className={clsName} onClick={this.handleClick} onContextMenu={this.handleRightClick}>\n        {img}\n      </div> \n    )\n  }\n}\n\nclass TargetCounter extends React.Component { //counter component for counting flagged tiles\n  constructor(props) {\n    super(props);\n    this.state = {  \n      num: 10\n    }\n  }\n  updateCounter() {\n    this.setState(state => ({num: targetCounterVar})); //changes state to current flags left\n  }\n  componentDidMount() {\n    this.interval = setInterval(() => this.updateCounter(), 100); //time to keep checking flags\n  }\n\n  render() { \n    return (  \n     <p>{this.state.num}</p>\n    );\n  }\n};\n \nclass ResetButton extends React.Component { //reset button\n  handleClick() {\n    window.location.reload(); //reloads page\n  }\n\n  render() { \n    return (  \n      <button type=\"button\" class=\"btn btn-dark\" onClick={this.handleClick}>Reset</button>\n    );\n  }\n};\n \n\nclass EndModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {  \n      isOpen: true,\n      updateInt: 1\n    }\n  }\n\n\n  componentDidMount() {\n    endCheck = true\n    this.interval = setInterval(() => this.checkEnd(), 100);\n  }\n\n  checkEnd() {\n    if (isEnd && endCheck) {\n      this.setState({updateInt: 2})\n      endCheck = false;\n    }\n  }\n\n  closeModal = () => this.setState({ isOpen: false });\n\n  onExit() {\n    window.location.reload();\n  }\n\n  render() { \n    if (isEnd) {\n      return (  \n        <>\n        <Modal show={this.state.isOpen} onHide={this.closeModal} onExit={this.onExit} size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\" centered>\n          <Modal.Header closeButton>\n            <Modal.Title>Modal heading</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\n          <Modal.Footer>\n            <ResetButton/>\n          </Modal.Footer>\n        </Modal>\n      </>\n      );\n    } else {\n      return (\n        <div></div>\n      );\n    };\n  }\n}\n \n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {uselessUpdate: 0};\n  }\n\n  nestedArray = [ //nested array for all tiles\n    [<Cell row={1} col={1} />, <Cell row={1} col={2} />, <Cell row={1} col={3} />, <Cell row={1} col={4} />, <Cell row={1} col={5} />, <Cell row={1} col={6} />, <Cell row={1} col={7} />, <Cell row={1} col={8} />],\n    [<Cell row={2} col={1} />, <Cell row={2} col={2} />, <Cell row={2} col={3} />, <Cell row={2} col={4} />, <Cell row={2} col={5} />, <Cell row={2} col={6} />, <Cell row={2} col={7} />, <Cell row={2} col={8} />],\n    [<Cell row={3} col={1} />, <Cell row={3} col={2} />, <Cell row={3} col={3} />, <Cell row={3} col={4} />, <Cell row={3} col={5} />, <Cell row={3} col={6} />, <Cell row={3} col={7} />, <Cell row={3} col={8} />],\n    [<Cell row={4} col={1} />, <Cell row={4} col={2} />, <Cell row={4} col={3} />, <Cell row={4} col={4} />, <Cell row={4} col={5} />, <Cell row={4} col={6} />, <Cell row={4} col={7} />, <Cell row={4} col={8} />],\n    [<Cell row={5} col={1} />, <Cell row={5} col={2} />, <Cell row={5} col={3} />, <Cell row={5} col={4} />, <Cell row={5} col={5} />, <Cell row={5} col={6} />, <Cell row={5} col={7} />, <Cell row={5} col={8} />],\n    [<Cell row={6} col={1} />, <Cell row={6} col={2} />, <Cell row={6} col={3} />, <Cell row={6} col={4} />, <Cell row={6} col={5} />, <Cell row={6} col={6} />, <Cell row={6} col={7} />, <Cell row={6} col={8} />],\n    [<Cell row={7} col={1} />, <Cell row={7} col={2} />, <Cell row={7} col={3} />, <Cell row={7} col={4} />, <Cell row={7} col={5} />, <Cell row={7} col={6} />, <Cell row={7} col={7} />, <Cell row={7} col={8} />],\n    [<Cell row={8} col={1} />, <Cell row={8} col={2} />, <Cell row={8} col={3} />, <Cell row={8} col={4} />, <Cell row={8} col={5} />, <Cell row={8} col={6} />, <Cell row={8} col={7} />, <Cell row={8} col={8} />],\n    [<Cell row={9} col={1} />, <Cell row={9} col={2} />, <Cell row={9} col={3} />, <Cell row={9} col={4} />, <Cell row={9} col={5} />, <Cell row={9} col={6} />, <Cell row={9} col={7} />, <Cell row={9} col={8} />]\n  ]\n\n  uselessUpdateFunction() { //dont ask\n    this.setState(prevState => ({uselessUpdate: prevState.uselessUpdate + 1}));\n  }\n\n  \n\n  render() { //page heirarchy\n    return (\n      <>\n      <EndModal/>\n      <div className=\"App\">\n        <div className=\"App-container\">\n          <div className=\"App-Header\">\n            <p className=\"App-title\">Minesweeper</p>\n            <img src={logo} className=\"App-logo\" alt=\"logo\"></img>\n          </div>\n          <div className=\"Control\">\n            <div className=\"flagCounter\">\n              <TargetCounter var={targetCounterVar} func={this.uselessUpdateFunction}/>\n            </div>\n            <div className=\"reset\">\n              <ResetButton />\n            </div>\n            <div className=\"timer\">\n              <p>0:00</p>\n            </div>\n          </div>\n          <div className=\"Field\">\n            {this.nestedArray}\n          </div>\n        </div>\n      </div>\n    </>\n    );\n  };\n}\n\nexport default App;\n\n\n",{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":37,"column":5,"nodeType":"25","messageId":"26","endLine":37,"endColumn":14},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"no-unused-vars","'updateInt' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]